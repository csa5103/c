#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function to compute modular exponentiation (a^b mod m)
int mod_exp(int base, int exp, int mod) {
    int result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

int main() {
    int p = 23; // Prime modulus
    int g = 5;  // Primitive root

    // Alice's private key
    int a = 6; // Secret number chosen by Alice
    int A = mod_exp(g, a, p); // Public key A = g^a mod p

    // Bob's private key
    int b = 15; // Secret number chosen by Bob
    int B = mod_exp(g, b, p); // Public key B = g^b mod p

    // Exchange public keys and compute the shared secret
    int shared_secret_Alice = mod_exp(B, a, p); // (B^a mod p)
    int shared_secret_Bob = mod_exp(A, b, p);   // (A^b mod p)

    // Print results
    printf("Public parameters: Prime p=%d, Base g=%d\n", p, g);
    printf("Alice's public key: A=%d\n", A);
    printf("Bob's public key: B=%d\n", B);
    printf("Shared secret (Alice): %d\n", shared_secret_Alice);
    printf("Shared secret (Bob): %d\n", shared_secret_Bob);

    // Analyzing security impact of sending x * a instead of g^a mod p
    printf("\nIf Alice and Bob exchanged xa mod p instead of g^a mod p, ");
    printf("then an attacker could easily derive the secret key using simple arithmetic, \n");
    printf("making the protocol insecure. Proper exponentiation ensures security.\n");

    return 0;
}
