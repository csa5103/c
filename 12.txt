#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MATRIX_SIZE 2
#define MOD 26

// Hill Cipher Key Matrix
int key[MATRIX_SIZE][MATRIX_SIZE] = {{9, 4}, {5, 7}};

// Function to find modular inverse of a number
int mod_inverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1;
}

// Function to find determinant of 2x2 matrix
int determinant(int matrix[MATRIX_SIZE][MATRIX_SIZE]) {
    return (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]) % MOD;
}

// Function to find the inverse matrix for decryption
void inverseMatrix(int key[MATRIX_SIZE][MATRIX_SIZE], int inverseKey[MATRIX_SIZE][MATRIX_SIZE]) {
    int det = determinant(key);
    if (det < 0) det += MOD;
    int det_inv = mod_inverse(det, MOD);
    
    if (det_inv == -1) {
        printf("Key matrix is not invertible.\n");
        exit(1);
    }
    
    inverseKey[0][0] = (key[1][1] * det_inv) % MOD;
    inverseKey[0][1] = (-key[0][1] * det_inv + MOD) % MOD;
    inverseKey[1][0] = (-key[1][0] * det_inv + MOD) % MOD;
    inverseKey[1][1] = (key[0][0] * det_inv) % MOD;
}

// Function to solve Hill Cipher via Known Plaintext Attack
void known_plaintext_attack(char *plaintext, char *ciphertext) {
    printf("Performing known plaintext attack...\n");
    // In a real attack, we would extract key information from known plaintext-ciphertext pairs.
    // For demonstration, we assume we have enough pairs and solve the key matrix.
    printf("Known plaintext: %s\n", plaintext);
    printf("Corresponding ciphertext: %s\n", ciphertext);
    printf("Extracting key matrix (not implemented in this demo)\n");
}

// Function to encrypt using Hill Cipher
void hill_encrypt(char *plaintext, char *ciphertext) {
    int len = strlen(plaintext);
    for (int i = 0; i < len; i += 2) {
        int p1 = plaintext[i] - 'a';
        int p2 = plaintext[i + 1] - 'a';
        
        int c1 = (key[0][0] * p1 + key[0][1] * p2) % MOD;
        int c2 = (key[1][0] * p1 + key[1][1] * p2) % MOD;
        
        ciphertext[i] = c1 + 'a';
        ciphertext[i + 1] = c2 + 'a';
    }
    ciphertext[len] = '\0';
}

int main() {
    char plaintext[] = "meetmeattheusualplaceattenratherthaneightoclock";
    int len = strlen(plaintext);
    if (len % 2 != 0) strcat(plaintext, "x"); // Padding if odd length
    char ciphertext[len + 1];
    
    hill_encrypt(plaintext, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);
    
    known_plaintext_attack(plaintext, ciphertext);
    
    return 0;
}
