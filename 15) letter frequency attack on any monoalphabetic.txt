#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_TEXT_LENGTH 1000
#define ALPHABET_SIZE 26

// English letter frequency (approximate values)
float english_freq[ALPHABET_SIZE] = {
    8.2, 1.5, 2.8, 4.3, 12.7, 2.2, 2.0, 6.1, 7.0, 0.2,
    0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0, 6.3, 9.1,
    2.8, 1.0, 2.4, 0.2, 2.0, 0.1
};

// Function to count letter frequency in a text
void count_letter_frequency(char *text, int *freq) {
    for (int i = 0; i < strlen(text); i++) {
        if (isalpha(text[i])) {
            freq[tolower(text[i]) - 'a']++;
        }
    }
}

// Function to compute chi-square statistic for a given mapping
float chi_square_stat(int *cipher_freq, float *expected_freq, int text_length) {
    float chi_square = 0.0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        float expected_count = (expected_freq[i] / 100.0) * text_length;
        if (expected_count > 0) {
            float diff = cipher_freq[i] - expected_count;
            chi_square += (diff * diff) / expected_count;
        }
    }
    return chi_square;
}

// Function to perform letter frequency attack on monoalphabetic substitution cipher
void frequency_attack(char *ciphertext, int top_n) {
    int cipher_freq[ALPHABET_SIZE] = {0};
    count_letter_frequency(ciphertext, cipher_freq);

    char best_plaintexts[top_n][MAX_TEXT_LENGTH];
    float chi_scores[ALPHABET_SIZE];

    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        char decrypted[MAX_TEXT_LENGTH];
        int decrypted_freq[ALPHABET_SIZE] = {0};
        
        for (int i = 0; i < strlen(ciphertext); i++) {
            if (isalpha(ciphertext[i])) {
                decrypted[i] = ((tolower(ciphertext[i]) - 'a' - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + 'a';
            } else {
                decrypted[i] = ciphertext[i];
            }
        }
        decrypted[strlen(ciphertext)] = '\0';
        count_letter_frequency(decrypted, decrypted_freq);
        chi_scores[shift] = chi_square_stat(decrypted_freq, english_freq, strlen(ciphertext));
        strcpy(best_plaintexts[shift], decrypted);
    }
    
    // Display top possible plaintexts
    printf("Top %d possible plaintexts based on frequency analysis:\n", top_n);
    for (int i = 0; i < top_n; i++) {
        printf("Rank %d: %s\n", i + 1, best_plaintexts[i]);
    }
}

int main() {
    char ciphertext[] = "xlmw mw xli txpsvetx xlmw mw";
    int top_n = 10;
    
    printf("Performing letter frequency attack on monoalphabetic cipher...\n");
    frequency_attack(ciphertext, top_n);
    
    return 0;
}
