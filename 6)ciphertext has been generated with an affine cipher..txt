#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MOD 26

int mod_inverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1;
}

void affine_decrypt(char *text, int a, int b) {
    int a_inv = mod_inverse(a, MOD);
    if (a_inv == -1) {
        printf("Invalid value for a. It must be coprime with 26.\n");
        return;
    }
    
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            char base = islower(text[i]) ? 'a' : 'A';
            text[i] = (a_inv * (text[i] - base - b + MOD) % MOD) + base;
        }
    }
}

int main() {
    char text[100];
    int a, b;
    
    printf("Enter ciphertext: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = 0;
    

    int p1 = 'E' - 'A', p2 = 'T' - 'A';
    int c1 = 'B' - 'A', c2 = 'U' - 'A';

    a = (c1 - c2) * mod_inverse(p1 - p2 + MOD, MOD) % MOD;
    if (a < 0) a += MOD;
    b = (c1 - a * p1 + MOD) % MOD;
    
    printf("Computed values: a = %d, b = %d\n", a, b);
    affine_decrypt(text, a, b);
    
    printf("Decrypted text: %s\n", text);
    
    return 0;
}